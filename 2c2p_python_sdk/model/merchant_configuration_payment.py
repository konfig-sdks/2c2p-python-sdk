# coding: utf-8

"""
    PGW Payment API 4.3

    Rest API for PGW payment purpose - LATEST

    The version of the OpenAPI document: 4.3
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 2c2p_python_sdk import schemas  # noqa: F401


class MerchantConfigurationPayment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            tokenize = schemas.BoolSchema
            tokenizeOnly = schemas.BoolSchema
            cardTokenOnly = schemas.BoolSchema
            immediatePayment = schemas.BoolSchema
        
            @staticmethod
            def fx() -> typing.Type['MerchantConfigurationPaymentFx']:
                return MerchantConfigurationPaymentFx
            __annotations__ = {
                "tokenize": tokenize,
                "tokenizeOnly": tokenizeOnly,
                "cardTokenOnly": cardTokenOnly,
                "immediatePayment": immediatePayment,
                "fx": fx,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenize"]) -> MetaOapg.properties.tokenize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenizeOnly"]) -> MetaOapg.properties.tokenizeOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardTokenOnly"]) -> MetaOapg.properties.cardTokenOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["immediatePayment"]) -> MetaOapg.properties.immediatePayment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fx"]) -> 'MerchantConfigurationPaymentFx': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tokenize", "tokenizeOnly", "cardTokenOnly", "immediatePayment", "fx", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenize"]) -> typing.Union[MetaOapg.properties.tokenize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenizeOnly"]) -> typing.Union[MetaOapg.properties.tokenizeOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardTokenOnly"]) -> typing.Union[MetaOapg.properties.cardTokenOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["immediatePayment"]) -> typing.Union[MetaOapg.properties.immediatePayment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fx"]) -> typing.Union['MerchantConfigurationPaymentFx', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tokenize", "tokenizeOnly", "cardTokenOnly", "immediatePayment", "fx", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tokenize: typing.Union[MetaOapg.properties.tokenize, bool, schemas.Unset] = schemas.unset,
        tokenizeOnly: typing.Union[MetaOapg.properties.tokenizeOnly, bool, schemas.Unset] = schemas.unset,
        cardTokenOnly: typing.Union[MetaOapg.properties.cardTokenOnly, bool, schemas.Unset] = schemas.unset,
        immediatePayment: typing.Union[MetaOapg.properties.immediatePayment, bool, schemas.Unset] = schemas.unset,
        fx: typing.Union['MerchantConfigurationPaymentFx', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MerchantConfigurationPayment':
        return super().__new__(
            cls,
            *args,
            tokenize=tokenize,
            tokenizeOnly=tokenizeOnly,
            cardTokenOnly=cardTokenOnly,
            immediatePayment=immediatePayment,
            fx=fx,
            _configuration=_configuration,
            **kwargs,
        )

from 2c2p_python_sdk.model.merchant_configuration_payment_fx import MerchantConfigurationPaymentFx
