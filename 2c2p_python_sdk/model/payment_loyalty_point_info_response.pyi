# coding: utf-8

"""
    PGW Payment API 4.3

    Rest API for PGW payment purpose - LATEST

    The version of the OpenAPI document: 4.3
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 2c2p_python_sdk import schemas  # noqa: F401


class PaymentLoyaltyPointInfoResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class paymentToken(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'paymentToken':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class providerID(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'providerID':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class providerName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'providerName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class referenceID(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'referenceID':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class providerType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'providerType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class terms(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'terms':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class rewards(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PaymentLoyaltyReward']:
                        return PaymentLoyaltyReward
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rewards':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class respCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'respCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class respDesc(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'respDesc':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "paymentToken": paymentToken,
                "providerID": providerID,
                "providerName": providerName,
                "referenceID": referenceID,
                "providerType": providerType,
                "terms": terms,
                "rewards": rewards,
                "respCode": respCode,
                "respDesc": respDesc,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentToken"]) -> MetaOapg.properties.paymentToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerID"]) -> MetaOapg.properties.providerID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerName"]) -> MetaOapg.properties.providerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["referenceID"]) -> MetaOapg.properties.referenceID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["providerType"]) -> MetaOapg.properties.providerType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terms"]) -> MetaOapg.properties.terms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rewards"]) -> MetaOapg.properties.rewards: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["respCode"]) -> MetaOapg.properties.respCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["respDesc"]) -> MetaOapg.properties.respDesc: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["paymentToken", "providerID", "providerName", "referenceID", "providerType", "terms", "rewards", "respCode", "respDesc", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentToken"]) -> typing.Union[MetaOapg.properties.paymentToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerID"]) -> typing.Union[MetaOapg.properties.providerID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerName"]) -> typing.Union[MetaOapg.properties.providerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["referenceID"]) -> typing.Union[MetaOapg.properties.referenceID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["providerType"]) -> typing.Union[MetaOapg.properties.providerType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terms"]) -> typing.Union[MetaOapg.properties.terms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rewards"]) -> typing.Union[MetaOapg.properties.rewards, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["respCode"]) -> typing.Union[MetaOapg.properties.respCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["respDesc"]) -> typing.Union[MetaOapg.properties.respDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["paymentToken", "providerID", "providerName", "referenceID", "providerType", "terms", "rewards", "respCode", "respDesc", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        paymentToken: typing.Union[MetaOapg.properties.paymentToken, None, str, schemas.Unset] = schemas.unset,
        providerID: typing.Union[MetaOapg.properties.providerID, None, str, schemas.Unset] = schemas.unset,
        providerName: typing.Union[MetaOapg.properties.providerName, None, str, schemas.Unset] = schemas.unset,
        referenceID: typing.Union[MetaOapg.properties.referenceID, None, str, schemas.Unset] = schemas.unset,
        providerType: typing.Union[MetaOapg.properties.providerType, None, str, schemas.Unset] = schemas.unset,
        terms: typing.Union[MetaOapg.properties.terms, None, str, schemas.Unset] = schemas.unset,
        rewards: typing.Union[MetaOapg.properties.rewards, list, tuple, None, schemas.Unset] = schemas.unset,
        respCode: typing.Union[MetaOapg.properties.respCode, None, str, schemas.Unset] = schemas.unset,
        respDesc: typing.Union[MetaOapg.properties.respDesc, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentLoyaltyPointInfoResponse':
        return super().__new__(
            cls,
            *args,
            paymentToken=paymentToken,
            providerID=providerID,
            providerName=providerName,
            referenceID=referenceID,
            providerType=providerType,
            terms=terms,
            rewards=rewards,
            respCode=respCode,
            respDesc=respDesc,
            _configuration=_configuration,
            **kwargs,
        )

from 2c2p_python_sdk.model.payment_loyalty_reward import PaymentLoyaltyReward
