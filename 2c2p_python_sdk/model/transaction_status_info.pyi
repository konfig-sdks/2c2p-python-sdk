# coding: utf-8

"""
    PGW Payment API 4.3

    Rest API for PGW payment purpose - LATEST

    The version of the OpenAPI document: 4.3
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 2c2p_python_sdk import schemas  # noqa: F401


class TransactionStatusInfo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dateTime(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateTime':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class agentCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'agentCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class channelCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'channelCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class data(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'amount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class currencyCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'currencyCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class invoiceNo(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invoiceNo':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class installmentPeriod(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'installmentPeriod':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class payLaterPeriod(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'payLaterPeriod':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class interestType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'interestType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class interestRate(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'interestRate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class monthlyPayment(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'monthlyPayment':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class ippAdditionalInfo(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ippAdditionalInfo':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class remainderChargeMode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'remainderChargeMode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class remainderChargeAmount(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'remainderChargeAmount':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class loyaltyPoints(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TransactionStatusLoyaltyInfo']:
                        return TransactionStatusLoyaltyInfo
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loyaltyPoints':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "description": description,
                "dateTime": dateTime,
                "agentCode": agentCode,
                "channelCode": channelCode,
                "data": data,
                "amount": amount,
                "currencyCode": currencyCode,
                "invoiceNo": invoiceNo,
                "installmentPeriod": installmentPeriod,
                "payLaterPeriod": payLaterPeriod,
                "interestType": interestType,
                "interestRate": interestRate,
                "monthlyPayment": monthlyPayment,
                "ippAdditionalInfo": ippAdditionalInfo,
                "remainderChargeMode": remainderChargeMode,
                "remainderChargeAmount": remainderChargeAmount,
                "loyaltyPoints": loyaltyPoints,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTime"]) -> MetaOapg.properties.dateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["agentCode"]) -> MetaOapg.properties.agentCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channelCode"]) -> MetaOapg.properties.channelCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoiceNo"]) -> MetaOapg.properties.invoiceNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["installmentPeriod"]) -> MetaOapg.properties.installmentPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payLaterPeriod"]) -> MetaOapg.properties.payLaterPeriod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interestType"]) -> MetaOapg.properties.interestType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interestRate"]) -> MetaOapg.properties.interestRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthlyPayment"]) -> MetaOapg.properties.monthlyPayment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ippAdditionalInfo"]) -> MetaOapg.properties.ippAdditionalInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remainderChargeMode"]) -> MetaOapg.properties.remainderChargeMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remainderChargeAmount"]) -> MetaOapg.properties.remainderChargeAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loyaltyPoints"]) -> MetaOapg.properties.loyaltyPoints: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "dateTime", "agentCode", "channelCode", "data", "amount", "currencyCode", "invoiceNo", "installmentPeriod", "payLaterPeriod", "interestType", "interestRate", "monthlyPayment", "ippAdditionalInfo", "remainderChargeMode", "remainderChargeAmount", "loyaltyPoints", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTime"]) -> typing.Union[MetaOapg.properties.dateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["agentCode"]) -> typing.Union[MetaOapg.properties.agentCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channelCode"]) -> typing.Union[MetaOapg.properties.channelCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoiceNo"]) -> typing.Union[MetaOapg.properties.invoiceNo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["installmentPeriod"]) -> typing.Union[MetaOapg.properties.installmentPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payLaterPeriod"]) -> typing.Union[MetaOapg.properties.payLaterPeriod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interestType"]) -> typing.Union[MetaOapg.properties.interestType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interestRate"]) -> typing.Union[MetaOapg.properties.interestRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthlyPayment"]) -> typing.Union[MetaOapg.properties.monthlyPayment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ippAdditionalInfo"]) -> typing.Union[MetaOapg.properties.ippAdditionalInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remainderChargeMode"]) -> typing.Union[MetaOapg.properties.remainderChargeMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remainderChargeAmount"]) -> typing.Union[MetaOapg.properties.remainderChargeAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loyaltyPoints"]) -> typing.Union[MetaOapg.properties.loyaltyPoints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "dateTime", "agentCode", "channelCode", "data", "amount", "currencyCode", "invoiceNo", "installmentPeriod", "payLaterPeriod", "interestType", "interestRate", "monthlyPayment", "ippAdditionalInfo", "remainderChargeMode", "remainderChargeAmount", "loyaltyPoints", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        dateTime: typing.Union[MetaOapg.properties.dateTime, None, str, schemas.Unset] = schemas.unset,
        agentCode: typing.Union[MetaOapg.properties.agentCode, None, str, schemas.Unset] = schemas.unset,
        channelCode: typing.Union[MetaOapg.properties.channelCode, None, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, None, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, None, str, schemas.Unset] = schemas.unset,
        currencyCode: typing.Union[MetaOapg.properties.currencyCode, None, str, schemas.Unset] = schemas.unset,
        invoiceNo: typing.Union[MetaOapg.properties.invoiceNo, None, str, schemas.Unset] = schemas.unset,
        installmentPeriod: typing.Union[MetaOapg.properties.installmentPeriod, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        payLaterPeriod: typing.Union[MetaOapg.properties.payLaterPeriod, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        interestType: typing.Union[MetaOapg.properties.interestType, None, str, schemas.Unset] = schemas.unset,
        interestRate: typing.Union[MetaOapg.properties.interestRate, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        monthlyPayment: typing.Union[MetaOapg.properties.monthlyPayment, None, str, schemas.Unset] = schemas.unset,
        ippAdditionalInfo: typing.Union[MetaOapg.properties.ippAdditionalInfo, None, str, schemas.Unset] = schemas.unset,
        remainderChargeMode: typing.Union[MetaOapg.properties.remainderChargeMode, None, str, schemas.Unset] = schemas.unset,
        remainderChargeAmount: typing.Union[MetaOapg.properties.remainderChargeAmount, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        loyaltyPoints: typing.Union[MetaOapg.properties.loyaltyPoints, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransactionStatusInfo':
        return super().__new__(
            cls,
            *args,
            description=description,
            dateTime=dateTime,
            agentCode=agentCode,
            channelCode=channelCode,
            data=data,
            amount=amount,
            currencyCode=currencyCode,
            invoiceNo=invoiceNo,
            installmentPeriod=installmentPeriod,
            payLaterPeriod=payLaterPeriod,
            interestType=interestType,
            interestRate=interestRate,
            monthlyPayment=monthlyPayment,
            ippAdditionalInfo=ippAdditionalInfo,
            remainderChargeMode=remainderChargeMode,
            remainderChargeAmount=remainderChargeAmount,
            loyaltyPoints=loyaltyPoints,
            _configuration=_configuration,
            **kwargs,
        )

from 2c2p_python_sdk.model.transaction_status_loyalty_info import TransactionStatusLoyaltyInfo
