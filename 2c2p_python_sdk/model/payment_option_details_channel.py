# coding: utf-8

"""
    PGW Payment API 4.3

    Rest API for PGW payment purpose - LATEST

    The version of the OpenAPI document: 4.3
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 2c2p_python_sdk import schemas  # noqa: F401


class PaymentOptionDetailsChannel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            sequenceNo = schemas.Int32Schema
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class bankShortName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bankShortName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def currencyCodes() -> typing.Type['PaymentOptionDetailsChannelCurrencyCodes']:
                return PaymentOptionDetailsChannelCurrencyCodes
            
            
            class iconUrl(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'iconUrl':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class logoUrl(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'logoUrl':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def payment() -> typing.Type['PaymentOptionDetailsPayment']:
                return PaymentOptionDetailsPayment
            isDown = schemas.BoolSchema
            checkEligibleOption = schemas.BoolSchema
            
            
            class ippProviderCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ippProviderCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class registrationStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'registrationStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class partnerMerchantRefID(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'partnerMerchantRefID':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "sequenceNo": sequenceNo,
                "name": name,
                "bankShortName": bankShortName,
                "currencyCodes": currencyCodes,
                "iconUrl": iconUrl,
                "logoUrl": logoUrl,
                "payment": payment,
                "isDown": isDown,
                "checkEligibleOption": checkEligibleOption,
                "ippProviderCode": ippProviderCode,
                "registrationStatus": registrationStatus,
                "partnerMerchantRefID": partnerMerchantRefID,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sequenceNo"]) -> MetaOapg.properties.sequenceNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankShortName"]) -> MetaOapg.properties.bankShortName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCodes"]) -> 'PaymentOptionDetailsChannelCurrencyCodes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iconUrl"]) -> MetaOapg.properties.iconUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logoUrl"]) -> MetaOapg.properties.logoUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment"]) -> 'PaymentOptionDetailsPayment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDown"]) -> MetaOapg.properties.isDown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkEligibleOption"]) -> MetaOapg.properties.checkEligibleOption: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ippProviderCode"]) -> MetaOapg.properties.ippProviderCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrationStatus"]) -> MetaOapg.properties.registrationStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerMerchantRefID"]) -> MetaOapg.properties.partnerMerchantRefID: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sequenceNo", "name", "bankShortName", "currencyCodes", "iconUrl", "logoUrl", "payment", "isDown", "checkEligibleOption", "ippProviderCode", "registrationStatus", "partnerMerchantRefID", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sequenceNo"]) -> typing.Union[MetaOapg.properties.sequenceNo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankShortName"]) -> typing.Union[MetaOapg.properties.bankShortName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCodes"]) -> typing.Union['PaymentOptionDetailsChannelCurrencyCodes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iconUrl"]) -> typing.Union[MetaOapg.properties.iconUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logoUrl"]) -> typing.Union[MetaOapg.properties.logoUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment"]) -> typing.Union['PaymentOptionDetailsPayment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDown"]) -> typing.Union[MetaOapg.properties.isDown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkEligibleOption"]) -> typing.Union[MetaOapg.properties.checkEligibleOption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ippProviderCode"]) -> typing.Union[MetaOapg.properties.ippProviderCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrationStatus"]) -> typing.Union[MetaOapg.properties.registrationStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerMerchantRefID"]) -> typing.Union[MetaOapg.properties.partnerMerchantRefID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sequenceNo", "name", "bankShortName", "currencyCodes", "iconUrl", "logoUrl", "payment", "isDown", "checkEligibleOption", "ippProviderCode", "registrationStatus", "partnerMerchantRefID", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        sequenceNo: typing.Union[MetaOapg.properties.sequenceNo, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        bankShortName: typing.Union[MetaOapg.properties.bankShortName, None, str, schemas.Unset] = schemas.unset,
        currencyCodes: typing.Union['PaymentOptionDetailsChannelCurrencyCodes', schemas.Unset] = schemas.unset,
        iconUrl: typing.Union[MetaOapg.properties.iconUrl, None, str, schemas.Unset] = schemas.unset,
        logoUrl: typing.Union[MetaOapg.properties.logoUrl, None, str, schemas.Unset] = schemas.unset,
        payment: typing.Union['PaymentOptionDetailsPayment', schemas.Unset] = schemas.unset,
        isDown: typing.Union[MetaOapg.properties.isDown, bool, schemas.Unset] = schemas.unset,
        checkEligibleOption: typing.Union[MetaOapg.properties.checkEligibleOption, bool, schemas.Unset] = schemas.unset,
        ippProviderCode: typing.Union[MetaOapg.properties.ippProviderCode, None, str, schemas.Unset] = schemas.unset,
        registrationStatus: typing.Union[MetaOapg.properties.registrationStatus, None, str, schemas.Unset] = schemas.unset,
        partnerMerchantRefID: typing.Union[MetaOapg.properties.partnerMerchantRefID, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentOptionDetailsChannel':
        return super().__new__(
            cls,
            *args,
            sequenceNo=sequenceNo,
            name=name,
            bankShortName=bankShortName,
            currencyCodes=currencyCodes,
            iconUrl=iconUrl,
            logoUrl=logoUrl,
            payment=payment,
            isDown=isDown,
            checkEligibleOption=checkEligibleOption,
            ippProviderCode=ippProviderCode,
            registrationStatus=registrationStatus,
            partnerMerchantRefID=partnerMerchantRefID,
            _configuration=_configuration,
            **kwargs,
        )

from 2c2p_python_sdk.model.payment_option_details_channel_currency_codes import PaymentOptionDetailsChannelCurrencyCodes
from 2c2p_python_sdk.model.payment_option_details_payment import PaymentOptionDetailsPayment
