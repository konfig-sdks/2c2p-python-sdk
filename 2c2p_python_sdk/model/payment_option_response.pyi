# coding: utf-8

"""
    PGW Payment API 4.3

    Rest API for PGW payment purpose - LATEST

    The version of the OpenAPI document: 4.3
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 2c2p_python_sdk import schemas  # noqa: F401


class PaymentOptionResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class paymentToken(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'paymentToken':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def merchantDetails() -> typing.Type['MerchantDetails']:
                return MerchantDetails
        
            @staticmethod
            def transactionDetails() -> typing.Type['TransactionDetails']:
                return TransactionDetails
            
            
            class channelCategories(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PaymentChannelCategory']:
                        return PaymentChannelCategory
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'channelCategories':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def userDetails() -> typing.Type['UserDetails']:
                return UserDetails
            
            
            class respCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'respCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class respDesc(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'respDesc':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "paymentToken": paymentToken,
                "merchantDetails": merchantDetails,
                "transactionDetails": transactionDetails,
                "channelCategories": channelCategories,
                "userDetails": userDetails,
                "respCode": respCode,
                "respDesc": respDesc,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentToken"]) -> MetaOapg.properties.paymentToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantDetails"]) -> 'MerchantDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionDetails"]) -> 'TransactionDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channelCategories"]) -> MetaOapg.properties.channelCategories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDetails"]) -> 'UserDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["respCode"]) -> MetaOapg.properties.respCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["respDesc"]) -> MetaOapg.properties.respDesc: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["paymentToken", "merchantDetails", "transactionDetails", "channelCategories", "userDetails", "respCode", "respDesc", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentToken"]) -> typing.Union[MetaOapg.properties.paymentToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantDetails"]) -> typing.Union['MerchantDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionDetails"]) -> typing.Union['TransactionDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channelCategories"]) -> typing.Union[MetaOapg.properties.channelCategories, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDetails"]) -> typing.Union['UserDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["respCode"]) -> typing.Union[MetaOapg.properties.respCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["respDesc"]) -> typing.Union[MetaOapg.properties.respDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["paymentToken", "merchantDetails", "transactionDetails", "channelCategories", "userDetails", "respCode", "respDesc", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        paymentToken: typing.Union[MetaOapg.properties.paymentToken, None, str, schemas.Unset] = schemas.unset,
        merchantDetails: typing.Union['MerchantDetails', schemas.Unset] = schemas.unset,
        transactionDetails: typing.Union['TransactionDetails', schemas.Unset] = schemas.unset,
        channelCategories: typing.Union[MetaOapg.properties.channelCategories, list, tuple, None, schemas.Unset] = schemas.unset,
        userDetails: typing.Union['UserDetails', schemas.Unset] = schemas.unset,
        respCode: typing.Union[MetaOapg.properties.respCode, None, str, schemas.Unset] = schemas.unset,
        respDesc: typing.Union[MetaOapg.properties.respDesc, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentOptionResponse':
        return super().__new__(
            cls,
            *args,
            paymentToken=paymentToken,
            merchantDetails=merchantDetails,
            transactionDetails=transactionDetails,
            channelCategories=channelCategories,
            userDetails=userDetails,
            respCode=respCode,
            respDesc=respDesc,
            _configuration=_configuration,
            **kwargs,
        )

from 2c2p_python_sdk.model.merchant_details import MerchantDetails
from 2c2p_python_sdk.model.payment_channel_category import PaymentChannelCategory
from 2c2p_python_sdk.model.transaction_details import TransactionDetails
from 2c2p_python_sdk.model.user_details import UserDetails
